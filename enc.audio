#!/bin/sh

set -e


noffmpeg()
{
	echo "ffmpeg not found in \$PATH!" >&2
	exit 1
}


# Check if ffmpeg is even installed on found in PATH
command -v ffmpeg >/dev/null || noffmpeg


badargs()
{
	bin="./$(basename "$0")"
	syntax="
Syntax:

    $bin [volume=<p%|max>] <profile> <input> <output>


Valid profile names are:

    mp3poor - Variable bitrate MP3, poor quality.
    mp3low  - Variable bitrate MP3, low quality.
    mp3std  - Variable bitrate MP3, standard quality.
    mp3high - Variable bitrate MP3, high quality.

    aacpoor - Variable bitrate AAC, poor quality.
    aaclow  - Variable bitrate AAC, low quality.
    aacstd  - Variable bitrate AAC, standard quality.
    aachigh - Variable bitrate AAC, high quality.

    aacarc   - AAC with quality good enough for archiving music.
    archive  - FLAC lossless compression, suitable for archiving music.

    speechlow  - Speech only, low quality (AAC HE mono).
    speechstd  - Speech only, standard quality (AAC HE mono).
    speechhigh - Speech only, high quality (AAC HE mono).

    webcast       - Webcast with low bitrate (Vorbis mono).
    webcasthigh   - Webcast with higher bitrate (Vorbis mono).
    webcasthq     - Webcast with low bitrate (Opus mono).
    webcasthqhigh - Webcast with higher bitrate (Opus mono).

    transform - Copy audio data unmodified, just rewrite container.

    fixaac - Fix broken AAC streams with bad timing or bad average bitrate
             that transform cannot fix. All meta information will be lost!


Volume can either be in percent, allowing increasing and decreasing volume by
any amount desired (up to the point where the output clips), or it can be
\"max\" in which case the maximum amplication is calculated that is possible
without causing any clipping.


The container format is guessed by the file extension of the output file. E.g.
\".mp4\" generates an MPEG 4 container file, whereas \".mp3\" would generate a
MP3 container, and \".aac\" a raw AAC data stream. Note that not all codecs can
be used in all container formats.

If output is a folder, the same file name as input will be used, except for
the file extension which will be the default extension for the default
container format of the chosen profile.
"
	printf "%s" "$syntax" >&2
	exit 1
}


volume=""
profile=""
infile=""
outfile=""
outfileExt=""


while [ -z "$outfile" ]
do
	if [ $# -lt 3 ]
	then
		badargs
	fi

	case "$1" in

		"volume="*)
			volume="$1"
			shift
		;;

		*)
			profile="$1"
			infile="$2"
			outfile="$3"
		;;
	esac
done


case "$volume" in

	"")
		# No volume set - fine
	;;

	"volume=max")
		volume=$(
			ffmpeg -i "$infile" -filter:a volumedetect \
				-f null /dev/null 2>&1 \
			| grep max_volume \
			| sed 's/.*max_volume: -\{0,1\}\([0-9.]\{1,\}\) dB$/\1/'
		)
		if [ "$volume" = "0.0" ]
		then
			volume=
		else
			volume="volume=${volume}dB"
		fi
	;;

	"volume="*"%")
		volume=${volume#"volume="}
		volume=${volume%"%"}
		[ "$volume" = 0 ] || volume="volume=$volume/100"
	;;

	*)
		volume=${volume#"volume="}
		echo "Bad volume value \"$volume\"!" >&1
		exit 1
	;;
esac


onexit()
{
	oldtraps=$(trap)
	oldexit=$(echo "$oldtraps" \
		| grep "EXIT$" \
		| sed -E 's/^trap -- (.*) EXIT$/\1/')
	if [ -n "$oldexit" ]
	then
		# shellcheck disable=SC2064
		trap "eval $oldexit ; $1" EXIT
	else
		# shellcheck disable=SC2064
		trap "$1" EXIT
	fi
}


# Never decode or encode any video
encargs="-vn"
decargs="-vn"


if [ "$volume" != "" ]
then
	if [ "$volume" = "0" ]
	then
		decargs="$decargs -an" # Don't even decode any audio
	else
		encargs="$encargs -filter:a \"$volume\""
	fi
fi


abspath()
(
	path=$1

	if [ ! -e "$path" ]; then
		return 1
	fi

	file=
	dir="$path"
	if [ ! -d "$dir" ]; then
		file=$( basename "$dir" )
		dir=$( dirname "$dir" )
	fi

	case "$dir" in
		/*) ;;
		*) dir="$( pwd )/$dir"
	esac
	result=$( cd "$dir" && pwd )

	if [ -n "$file" ]; then
		case "$result" in
			*/) ;;
			*) result="$result/"
		esac
		result="$result$file"
	fi

	printf "%s\n" "$result"
)


basenameWithoutExt()
{
	printf '%s' "$( basename "$1" | cut -f1 -d'.' )"
}


hascoder()
{
	encfound=$(ffmpeg -encoders 2>/dev/null | grep -E "^ [^ ]+ $1 ")
	if [ -n "$encfound" ]
	then
		return 0
	fi
	return 1
}


#  $1  - bitrate in kbit/s (must be 16 kbit/s or higher)
# ($2) - "stereo" or "mono"; default is "stereo"
# ($3) - force HE/HEv2: "yes" or "no"; default is "no"
activate_aac()
{
	if [ "$1" -lt 16 ]
	then
		echo "AAC bitrate too low!" >&2
		exit 1
	fi

	if [ "${2:-"stereo"}" = "mono" ]
	then
		encargs="$encargs -ac 1" # Convert audio to mono
	fi

	encargs="$encargs -b:a ${1}k" # Set bitrate in kbit/s

	if [ "$1" -lt 80 ] || [ "${3:-"no"}" = "yes" ]
	then
		if [ "${2:-"stereo"}" = "mono" ]
		then
			if hascoder "aac_at"
			then
				encargs="$encargs -c:a aac_at" # AAC audio
				encargs="$encargs -profile:a 4" # Use HE encoding
				return
			fi

			if hascoder "libfdk_aac"
			then
				encargs="$encargs -c:a libfdk_aac" # AAC audio
				encargs="$encargs -profile:a aac_he" # Use HE encoding
				return
			fi
		fi

		if hascoder "aac_at"
		then
			encargs="$encargs -c:a aac_at" # AAC audio
			encargs="$encargs -profile:a 28" # Use HEv2 encoding
			return
		fi

		if hascoder "libfdk_aac"
		then
			encargs="$encargs -c:a libfdk_aac" # AAC audio
			encargs="$encargs -profile:a aac_he_v2" # Use HEv2 encoding
			return
		fi

		if [ "${3:-"no"}" = "yes" ]
		then
			echo "No encoder with HE/HEv2 support found!" >&2
			exit 1
		fi
	fi

	if hascoder "aac_at"
	then
		encargs="$encargs -c:a aac_at" # AAC audio
		encargs="$encargs -aac_at_mode abr" # Set ABR mode
		return
	fi

	if hascoder "libfdk_aac"
	then
		encargs="$encargs -c:a libfdk_aac" # AAC audio
		return
	fi

	if hascoder "aac"
	then
		encargs="$encargs -c:a aac" # AAC audio
		encargs="$encargs -aac_coder twoloop" # Tread CPU time for quality
		return
	fi

	echo "No AAC encoder found!" >&2
	exit 1
}


# $1 - vbr quality - 2 to 5, 5 being best
activate_aacvbr()
{
	if hascoder "aac_at"
	then
		encargs="$encargs -c:a aac_at" # AAC audio
		encargs="$encargs -aac_at_mode vbr" # Set VBR mode
		case "$1" in
			"5")
				encargs="$encargs -qscale:a 3" # Approx. libfdk level 5
			;;

			"4")
				encargs="$encargs -qscale:a 6" # Approx. libfdk level 4
			;;

			"3")
				encargs="$encargs -qscale:a 8" # Approx. libfdk level 3
			;;

			"2")
				encargs="$encargs -qscale:a 9" # Approx. libfdk level 2
			;;

		esac
		return
	fi

	if hascoder "libfdk_aac"
	then
		encargs="$encargs -c:a libfdk_aac" # AAC audio
		encargs="$encargs -vbr $1" # Set VBR quality
		return
	fi

	if hascoder "aac"
	then
		encargs="$encargs -c:a aac" # AAC audio
		encargs="$encargs -aac_coder twoloop" # Treat speed for quality
		# The VBR abilities of the aac codec suck horribly, that's probably
		# why this is still an experimental feature as of 2022. Despite
		# producing larger files than a lower CBR rate, they still sound much
		# worse, so with that enocder, only CBR makes sense at the moment.
		case "$1" in
			"5")
				encargs="$encargs -b:a 210" # Approx. libfdk level 5
				;;

			"4")
				encargs="$encargs -b:a 140k" # Approx. libfdk level 4
				;;

			"3")
				encargs="$encargs -b:a 110k" # Approx. libfdk level 3
				;;

			"2")
				encargs="$encargs -b:a 80k"  # Approx. libfdk level 2
				;;

		esac
		return
	fi

	echo "No AAC encoder found!" >&2
	exit 1
}


case "$profile" in

	"mp3poor")
		encargs="$encargs -codec:a libmp3lame" # Set liblame codec
		encargs="$encargs -qscale:a 6" # Set VBR quality
		encargs="$encargs -compression_level 0" # Highst compression quality
		outfileExt="mp3"
	;;

	"mp3low")
		encargs="$encargs -codec:a libmp3lame" # Set liblame codec
		encargs="$encargs -qscale:a 4" # Set VBR quality
		encargs="$encargs -compression_level 0" # Highst compression quality
		outfileExt="mp3"
	;;

	"mp3std")
		encargs="$encargs -codec:a libmp3lame" # Set liblame codec
		encargs="$encargs -qscale:a 2" # Set VBR quality
		encargs="$encargs -compression_level 0" # Highst compression quality
		outfileExt="mp3"
	;;

	"mp3high")
		encargs="$encargs -codec:a libmp3lame" # Set liblame codec
		encargs="$encargs -qscale:a 0" # Set VBR quality
		encargs="$encargs -compression_level 0" # Highst compression quality
		outfileExt="mp3"
	;;



	"aacpoor")
		activate_aacvbr 2
		outfileExt="m4a"
	;;

	"aaclow")
		activate_aacvbr 3
		outfileExt="m4a"
	;;

	"aacstd")
		activate_aacvbr 4
		outfileExt="m4a"
	;;

	"aachigh")
		activate_aacvbr 5
		outfileExt="m4a"
	;;


	"aacarc")
		if hascoder "aac_at"
		then
			encargs="$encargs -c:a aac_at" # AAC audio
			encargs="$encargs -aac_at_mode vbr" # Set VBR mode
			encargs="$encargs -qscale:a 2" # Set VBR mode
		else
			activate_aac 256 stereo
		fi
		outfileExt="m4a"
	;;

	"archive")
		encargs="$encargs -codec:a flac" # Set FLAC codec
		encargs="$encargs -compression_level 12" # Use best compression
		outfileExt="flac"
	;;


	"speechlow")
		activate_aac 24 mono yes
		outfileExt="m4a"
	;;

	"speechstd")
		activate_aac 32 mono yes
		outfileExt="m4a"
	;;

	"speechhigh")
		activate_aac 48 mono yes
		outfileExt="m4a"
	;;


	"webcast")
		encargs="$encargs -c:a libvorbis" # Vorbis audio
		encargs="$encargs -b:a 32k" # Use 24 kbit/s for audio
		encargs="$encargs -ar 22050" # Lower sampling rate to 22050 Hz
		encargs="$encargs -ac 1" # Convert audio to mono
		outfileExt="ogg"
	;;

	"webcasthigh")
		encargs="$encargs -c:a libvorbis" # Vorbis audio
		encargs="$encargs -b:a 56k" # Use 56 kbit/s for audio
		encargs="$encargs -ac 1" # Convert audio to mono
		outfileExt="ogg"
	;;

	"webcasthq")
		encargs="$encargs -c:a libopus" # Opus audio
		encargs="$encargs -b:a 24k" # Use 24 kbit/s for audio
		encargs="$encargs -ar 24000" # Lower sampling rate to 24000 Hz
		encargs="$encargs -ac 1" # Convert audio to mono
		outfileExt="opus"
	;;

	"webcasthqhigh")
		encargs="$encargs -c:a libopus" # Opus audio
		encargs="$encargs -b:a 56k" # Use 24 kbit/s for audio
		encargs="$encargs -ac 1" # Convert audio to mono
		outfileExt="opus"
	;;


	"transform")
		encargs="$encargs -c:a copy" # Copy audio data
	;;


	"fixaac")
		# Sometimes "transform" will already fix the stream when transforming
		# from an AAC container to a container of the same kind but in some
		# cases this doesn't work and then this trick will work:
		ffmpeg -vn -i "$infile" -c:a copy -f adts - \
			| ffmpeg -f aac -i - -c:a copy "$outfile"
		exit 0
	;;

	*)
		echo "Unknown profile \"$profile\"!" >&1
		exit 1
	;;
esac


if [ -d "$outfile" ]
then
	ext=""
	[ -n "$outfileExt" ] && ext=".$outfileExt"
	outfile="$outfile/$( basenameWithoutExt "$infile" )$ext"
	if [ "$(abspath "$infile")" = "$(abspath "$outfile")" ]
	then
		echo "Input file cannot override itself!" >&1
		exit 1
	fi
fi


callffmpeg()
{
	eval "ffmpeg $*"
}


case "$profile" in

	"fixaac")
		# Sometimes "transform" will already fix the stream when transforming
		# from an AAC container to a container of the same kind but in some
		# cases this doesn't work and then this trick will work:
		ffmpeg -vn -i "$infile" -c:a copy -f adts - \
			| ffmpeg -f aac -i - -c:a copy "$outfile"
	;;


	*)
		if="\"$infile\""
		of="\"$outfile\""

		callffmpeg "$decargs" -i "$if" "$encargs" "$of"
	;;
esac
